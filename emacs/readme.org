#+TITLE:     joe di castro's Emacs Configuration
#+AUTHOR:    joe di castro
#+EMAIL:     joe@joedicastro.com
#+DATE:      2014-03-09
#+LANGUAGE:  en

* Emacs Configuration using Org-Babel

*This is a work in progress*

This repository contains the setup I use to customize Emacs. The
configuration uses [[http://orgmode.org/][Org-Mode]], [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] and [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] to
manage all the settings in a unique Org Mode file.

** How it works

It uses one of the standard Emacs init files, =init.el= to bootstrap
all the configuration. This configuration is thought to be stored in
the standard =~/.emacs.d= directory and to setup this configuration
you need to symlink this =emacs= directory to that. Once made that, if
you start Emacs the =~/.emacs.d/init.el= file loads the
=~/emacs.d/readme.org= file into Emacs, and exports all the code
blocks (this process is called "tangling") to
=~/.emacs.d/readme.el=. If a block is marked with =:tangle no= it will
be skipped. When the tangling is finished =readme.el= is loaded to
initialize Emacs.

The cool thing about this setup is that you can export the same file
as documentation to HTML or PDF or LaTeX quite easily, e.g. to do it
from Org mode directly press =C-c C-e=, choose =h= and then one of the
options to produce HTML output. At the same time it makes the
configuration management a delight, been pretty easy to find any
setting and organize them.

* Packages setup
** Packages list

The list of packages to install.

#+BEGIN_SRC emacs-lisp
    (setq my-packages
          '(
            auto-complete
            calfw
            elfeed
            evil
            evil-indent-textobject
            evil-leader
            evil-matchit
            evil-nerdcommenter
            flatland-theme
            ido-ubiquitous
            ido-vertical-mode
            ido-yes-or-no
            magit
            markdown-mode
            moe-theme
            monokai-theme
            pretty-mode
            smart-mode-line
            smartparens
            smex
            sublime-themes
            surround
            ujelly-theme
            undo-tree
            w3m
            win-switch
            ))
#+END_SRC

** Repositories

The ELPA repositories from where the packages are fetched.

#+BEGIN_SRC emacs-lisp
    (setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
                             ("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("org" . "http://orgmode.org/elpa/")
                             ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** Auto-installation

The auto-installation process for all the packages that are not
already installed.

#+BEGIN_SRC emacs-lisp
    ;;; initialize the packages and create the packages list if not exists
    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;;; install packages if not exists
    (dolist (pkg my-packages)
      (when (and (not (package-installed-p pkg))
               (assoc pkg package-archive-contents))
        (package-install pkg)))
#+END_SRC

** Updating Packages

Requires to do it manually, but is a pretty easy task!

1. execute the command =M-x list-packages= which will automatically refresh the package list
2. press the key =U= to mark all upgradable packages to be upgraded
3. finally press the =x= key to actually perform the new updates

Emacs will then fetch and install all upgrades, and ask you to whether
to remove the old, obsolete versions afterwards.

* General Behaviour

| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| C-w     | backward-kill-word       | Kill the entire previous (to the cursor) word                |

** Encoding
Make sure that UTF-8 is used everywhere

#+BEGIN_SRC emacs-lisp
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-language-environment "UTF-8")
    (prefer-coding-system 'utf-8)
#+END_SRC emacs-lisp

** Temporal directory

I like to keep all of the temporal files and dirs (cache, backups,
...) in an unique directory. If this directory does not exists, then create it


#+BEGIN_SRC emacs-lisp
     (unless (file-exists-p "~/.emacs.d/tmp")
        (make-directory "~/.emacs.d/tmp"))
#+END_SRC

** Disable auto-save files

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
#+END_SRC emacs-lisp

** Backup files directory

Don't spread backup files all over the filesystem, one place to store
them all

#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
        '(("" . "~/.emacs.d/tmp/backup")))
#+END_SRC emacs-lisp

** History

#+BEGIN_SRC emacs-lisp
    (setq-default history-length 1000)
    (savehist-mode t)
#+END_SRC emacs-lisp

** Show matching parenthesis

#+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
#+END_SRC emacs-lisp

** Always show trailing white-spaces

##+BEGIN_SRC emacs-lisp
#    (setq-default show-trailing-whitespace t)
##+END_SRC emacs-lisp

** Always indent with spaces

#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default default-tab-width 4)
#+END_SRC emacs-lisp

** Replace yes/no questions with y/n

#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC emacs-lisp

** Mondays are the first day of the week (for M-x calendar)

#+BEGIN_SRC emacs-lisp
    (setq-default calendar-week-start-day 1)
#+END_SRC emacs-lisp

** Use undo-tree for better undo

#+BEGIN_SRC emacs-lisp
    (require 'undo-tree)
    (global-undo-tree-mode)
#+END_SRC emacs-lisp

** keep session between emacs runs (~/.emacs.desktop)
#+BEGIN_SRC emacs-lisp

    (setq desktop-save 'if-exists)
    (desktop-save-mode 1)
    (setq desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 200)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
#+END_SRC

** User information

Sets the user's information properly

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "joe di castro"
        user-mail-address "joe@joedicastro.com")
#+END_SRC

** Remove beep

#+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
#+END_SRC

** Use ibuffer by default

#+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
#+END_SRC

* Aesthetics

You don't only want to have a beast to edit, you want a good looking
one too!

** Remove the welcome screen
#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
#+END_SRC

** Remove the message in the scratch buffer
#+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message "")
#+END_SRC

** Hide the menu bar
#+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
#+END_SRC

** Hide the tool bar
#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
#+END_SRC

** Hide the scroll bar
#+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp
    (load-theme 'monokai t)
#+END_SRC

** Mode Line

Settings for the mode line

*** Show the column number

#+BEGIN_SRC emacs-lisp
     (column-number-mode t)
#+END_SRC

*** Show the buffer size (bytes)

#+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
#+END_SRC

*** Show the current function

#+BEGIN_SRC emacs-lisp
    (which-function-mode 1)
#+END_SRC

*** Smart mode line

#+BEGIN_SRC emacs-lisp
    ;;; smart-mode-line
    (setq sml/theme 'dark)
    (setq sml/mode-width 'full)
    (setq sml/name-width 30)
    (sml/setup)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :family "Dejavu Sans Mono" :height 110)
#+END_SRC

** Cursor not blinking

#+BEGIN_SRC emacs-lisp
    (blink-cursor-mode -1)
#+END_SRC

** Highlight the current line

#+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
#+END_SRC

** Show empty lines
This option show the empty lines at the end of the buffer
#+BEGIN_SRC emacs-lisp
    (toggle-indicate-empty-lines)
#+END_SRC

** Pretty mode

Use mathematical *Unicode* /symbols/ instead of expressions or keywords in
some programming languages
#+BEGIN_SRC emacs-lisp
    (global-pretty-mode t)
#+END_SRC

** More thinner window divisions
#+BEGIN_SRC emacs-lisp
    (fringe-mode '(1 . 1))
#+END_SRC

* Edition
** Auto-completion

#+BEGIN_SRC emacs-lisp
    (require 'auto-complete)
    (global-auto-complete-mode)
#+END_SRC

*** enable it globally

#+BEGIN_SRC emacs-lisp
(defun auto-complete-mode-maybe ()
  "No maybe for you. Only AC!"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1)))
#+END_SRC

*** auto-complete file
#+BEGIN_SRC emacs-lisp
(setq ac-comphist-file (concat user-emacs-directory
             "temp/ac-comphist.dat"))
#+END_SRC

** Delete after insertion over selection

#+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
#+END_SRC

** Basic indentation

#+BEGIN_SRC emacs-lisp
    (setq-default c-basic-offset 4)
#+END_SRC

** Smartpaarens

#+BEGIN_SRC emacs-lisp
    (require 'smartparens-config)
    (smartparens-global-mode)
#+END_SRC

** Backward-kill-word as alternative to Backspace

Kill the entire word instead of hitting Backspace key several
times. To do this will bind the =backward-kill-region= function to the
=C-w= key combination

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-w" 'backward-kill-word)
#+END_SRC

*** Rebind the original C-w binding

Now we reasigne the original binding to that combination to a new one

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
#+END_SRC

* Vim-like Features

For those who came from Vim is more easy to use something alike

** Use evil


| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| C-z     | evil-emacs-state         | Toggle evil-mode                                             |

#+BEGIN_SRC emacs-lisp
    (setq evil-shift-width 4)
    (require 'evil)
    (evil-mode 1)
#+END_SRC

*** Disable it in certain modes

#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'elfeed-search-mode 'emacs)
  (evil-set-initial-state 'elfeed-show-mode 'emacs)
#+END_SRC

** evil-leader

#+BEGIN_SRC emacs-lisp
    (require 'evil-leader)
#+END_SRC

** evil-indent-textobject

#+BEGIN_SRC emacs-lisp
    (require 'evil-indent-textobject)
#+END_SRC

** Use evil for Org Mode

This was shameless stolen from https://github.com/edwtjo/evil-org-mode.git

*** Define minor mode =evil-org-mode=

#+BEGIN_SRC emacs-lisp
    (define-minor-mode evil-org-mode
      "Buffer local minor mode for evil-org"
      :init-value nil
      :lighter " EvilOrg"
      :keymap (make-sparse-keymap) ; defines evil-org-mode-map
      :group 'evil-org)
#+END_SRC

*** Hook to only load this mode with org-mode

#+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook 'evil-org-mode)
#+END_SRC

*** Aux functions

#+BEGIN_SRC emacs-lisp
    (defun always-insert-item ()
      "Force insertion of org item"
      (if (not (org-in-item-p))
          (insert "\n- ")
        (org-insert-item))
      )

    (defun evil-org-eol-call (fun)
      "Go to end of line and call provided function"
      (end-of-line)
      (funcall fun)
      (evil-append nil)
      )
#+END_SRC

*** Normal state shorcuts

#+BEGIN_SRC emacs-lisp
    (evil-define-key 'normal evil-org-mode-map
      "gh" 'outline-up-heading
      "gj" (if (fboundp 'org-forward-same-level) ;to be backward compatible with older org version
           'org-forward-same-level
          'org-forward-heading-same-level)
      "gk" (if (fboundp 'org-backward-same-level)
           'org-backward-same-level
          'org-backward-heading-same-level)
      "gl" 'outline-next-visible-heading
      "t" 'org-todo
      "T" '(lambda () (interactive) (evil-org-eol-call '(org-insert-todo-heading nil)))
      "H" 'org-beginning-of-line
      "L" 'org-end-of-line
      ";t" 'org-show-todo-tree
      "o" '(lambda () (interactive) (evil-org-eol-call 'always-insert-item))
      "O" '(lambda () (interactive) (evil-org-eol-call 'org-insert-heading))
      "$" 'org-end-of-line
      "^" 'org-beginning-of-line
      "<" 'org-metaleft
      ">" 'org-metaright
      ";a" 'org-agenda
      "-" 'org-cycle-list-bullet
      (kbd "TAB") 'org-cycle)
#+END_SRC

*** Normal & Insert stats shorcuts

#+BEGIN_SRC emacs-lisp
    (mapc (lambda (state)
            (evil-define-key state evil-org-mode-map
              (kbd "M-l") 'org-metaright
              (kbd "M-h") 'org-metaleft
              (kbd "M-k") 'org-metaup
              (kbd "M-j") 'org-metadown
              (kbd "M-L") 'org-shiftmetaright
              (kbd "M-H") 'org-shiftmetaleft
              (kbd "M-K") 'org-shiftmetaup
              (kbd "M-J") 'org-shiftmetadown
              (kbd "M-o") '(lambda () (interactive)
                             (evil-org-eol-call
                              '(lambda()
                                 (org-insert-heading)
                                 (org-metaright))))
              (kbd "M-t") '(lambda () (interactive)
                             (evil-org-eol-call
                              '(lambda()
                                 (org-insert-todo-heading nil)
                                 (org-metaright))))
              ))
          '(normal insert))
#+END_SRC

** Surround

Use the surround plugin, the equivalent to the Vim one.

#+BEGIN_SRC emacs-lisp
    (require 'surround)
    (global-surround-mode 1)
#+END_SRC

* Browser

#+BEGIN_SRC emacs-lisp
;    (setq browse-url-browser-function 'w3m-browse-url)
;    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
     (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "firefox")
     (setq w3m-default-display-inline-images t)
#+END_SRC

* Modes
** Org-mode settings

*** Enable Org Mode

#+BEGIN_SRC emacs-lisp
    (require 'org)
#+END_SRC

*** Set default directories

#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

*** Highlight code blocks syntax

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
#+END_SRC

*** Tasks management

**** Record date and time when a task is marked as DONE

#+BEGIN_SRC emacs-lisp
    (setq org-log-done t)
#+END_SRC

**** Detect idle time when clock is running

#+BEGIN_SRC emacs-lisp
    (setq org-clock-idle-time 10)
#+END_SRC

*** Agenda & diary

**** Include diary entries
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-include-diary t)
#+END_SRC

**** Agenda files
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
#+END_SRC

*** Third Apps

**** Configure the external apps to open files
#+BEGIN_SRC emacs-lisp
     (setq org-file-apps
        '(("\\.pdf\\'" . "zathura %s")
          ("\\.gnumeric\\'" . "gnumeric %s")))
#+END_SRC

*** Show images inline

Only works in GUI, but is a nice feature to have

#+BEGIN_SRC emacs-lisp
    (setq org-startup-with-inline-images t)
#+END_SRC

**** Limit images width

#+BEGIN_SRC emacs-lisp
    (setq org-image-actual-width '(300))
#+END_SRC

* Batteries
*** Calfw

This program displays a calendar view in the Emacs buffer.

#+BEGIN_SRC emacs-lisp
    (require 'calfw)
    (require 'calfw-org)
#+END_SRC

**** Unicode chars for lines

#+BEGIN_SRC emacs-lisp
;; Unicode characters
(setq cfw:fchar-junction ?╋
      cfw:fchar-vertical-line ?┃
      cfw:fchar-horizontal-line ?━
      cfw:fchar-left-junction ?┣
      cfw:fchar-right-junction ?┫
      cfw:fchar-top-junction ?┯
      cfw:fchar-top-left-corner ?┏
      cfw:fchar-top-right-corner ?┓)
#+END_SRC

*** Smex

Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| M-x     | smex                     | Calls a interactive command using smex                       |
| M-X     | smex-major-mode-commands | Idem as above but limited to the current major mode commands |

#+BEGIN_SRC emacs-lisp
    (require 'smex)
#+END_SRC

**** Set cache file

Smex keeps a file to save its state betweens Emacs sessions.
The default path is =~/.smex-items=

#+BEGIN_SRC emacs-lisp
    (setq smex-save-file "~/.emacs.d/tmp/smex-items")
#+END_SRC

**** Useful bindings & Delayed Initation

#+BEGIN_QUOTE
I install smex with the following code to make emacs startup a little
faster.  This delays initializing smex until it's needed. IMO, smex
should load without this hack.

Just have smex call =smex-initialize= when it's needed instead of
having the user do it. --[[http://www.emacswiki.org/emacs/Smex][LeWang on EmacsWiki]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(global-set-key [(meta x)] (lambda ()
                             (interactive)
                             (or (boundp 'smex-cache)
                                 (smex-initialize))
                             (global-set-key [(meta x)] 'smex)
                             (smex)))

(global-set-key [(shift meta x)] (lambda ()
                                   (interactive)
                                   (or (boundp 'smex-cache)
                                       (smex-initialize))
                                   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                   (smex-major-mode-commands)))
#+END_SRC

*** Ido
**** set cache file
#+BEGIN_SRC emacs-lisp
    (setq ido-save-directory-list-file "~/.emacs.d/tmp/ido.last")
#+END_SRC

**** enable Ido
#+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-use-virtual-buffers t)
    (require 'ido)
    (ido-mode t)
    (ido-everywhere t)
#+END_SRC

**** Ido-ubiquitous

Gimme some ido... everywhere!

Does what you expected ido-everywhere to do.

#+BEGIN_SRC emacs-lisp
    (require 'ido-ubiquitous)
    (ido-ubiquitous-mode t)
#+END_SRC

**** Ido-vertical-mode

Makes ido-mode display vertically.

#+BEGIN_SRC emacs-lisp
    (require 'ido-vertical-mode)
    (ido-vertical-mode t)
#+END_SRC

**** Ido for yes or no questions

#+BEGIN_SRC emacs-lisp
    (require 'ido-yes-or-no)
    (ido-yes-or-no-mode t)
#+END_SRC

*** Magit
   :PROPERTIES:
   :ATTACH_DIR: /home/joedicastro/dotfiles/emacs/img/
   :END:

#+BEGIN_SRC emacs-lisp
    (require 'magit)
#+END_SRC

*** Elfeed

Elfeed is an extensible web feed reader for Emacs, supporting both
Atom and RSS

*Search mode*

| Binding | Call                           | Do                                          |
|---------+--------------------------------+---------------------------------------------|
| q       | quit-window                    | exit                                        |
| g       | elfeed-search-update--force    | refresh view of the feed listing            |
| G       | elfeed-update                  | fetch feed updates from the servers         |
| s       | elfeed-search-live-filter      | update the search filter (date & tags)      |
| RET     | elfeed-search-show-entry       | view selected entry in a buffer             |
| b       | elfeed-search-browse-url       | open selected entries in your browser       |
| y       | elfeed-search-yank             | copy selected entries URL to the clipboard  |
| r       | elfeed-search-untag-all-unread | mark selected entries as read               |
| u       | elfeed-search-tag-all-unread   | mark selected entries as unread             |
| n       | next-line                      | next line                                   |
| p       | previous-line                  | previous line                               |
| t       | beginning-of-buffer            | go to the top of buffer                     |
| T       | end-of-buffer                  | go to the end of buffer                     |
| +       | elfeed-search-tag-all          | add a specific tag to selected entries      |
| -       | elfeed-search-untag-all        | remove a specific tag from selected entries |

*Show mode*

| Binding | Call                | Do                                  |
|---------+---------------------+-------------------------------------|
| q       | elfeed-kill-buffer  | exit the entry                      |
| g       | elfeed-show-refresh | refresh the entry                   |
| n       | elfeed-show-next    | go to the next entry                |
| p       | elfeed-show-prev    | go to the previous entry            |
| b       | elfeed-show-visit   | open the entry in your browser      |
| y       | elfeed-show-yank    | copy the entry URL to the clipboard |
| u       |                     | mark the entry as unread            |
| +       | elfeed-show-tag     | add tag to the entry                |
| -       | elfeed-show-untag   | remove tag from the entry           |
| SPC     | scroll-up-command   | scroll up                           |
| DEL     | scroll-down-command | scroll down                         |
| tab     | shr-next-link       | go to the next link                 |
| backtab | shr-previous-link   | go to the previous link             |


#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (global-set-key (kbd "C-x w") 'elfeed)

  ; Load the feeds file
  (load "~/.emacs.d/elfeed.el")

  ; Entries older than 2 weeks are marked as read
  (add-hook 'elfeed-new-entry-hook
          (elfeed-make-tagger :before "2 weeks ago"
                              :remove 'unread))

  (setq elfeed-db-directory "~/.emacs.d/tmp/elfeed")
  (setq elfeed-search-filter "@2-days-old +unread")
  (define-key elfeed-search-mode-map "t" 'beginning-of-buffer)
  (define-key elfeed-search-mode-map "T" 'end-of-buffer)
#+END_SRC

*** Win-Switch
 
Navigating through Emacs windows easily with =win-switch=

| Binding | Call                                 | Do                                                                    |
|---------+--------------------------------------+-----------------------------------------------------------------------|
| C-x o   | win-switch-dispatch                  | enter in win-switch mode                                              |
| h       | win-switch-left                      | select the window left the current window                             |
| l       | win-switch-right                     | select the window right the current window                            |
| j       | win-switch-down                      | select the window below the current window                            |
| k       | win-switch-up                        | select the window above the current window                            |
| n       | win-switch-next-window               | cycles forward through the window list in the current frame           |
| p       | win-switch-previous-window           | cycles backward through the window list in the current frame          |
| f       | win-switch-other-frame               | cycles among existing frames                                          |
| H       | win-switch-shrink-horizontally       | horizontally shrinks the current window                               |
| L       | win-switch-enlarge-horizontally      | horizontally enlarges the current window                              |
| J       | win-switch-shrink-vertically         | vertically shrinks the current window                                 |
| K       | win-switch-enlarge-vertically        | vertically enlarges the current window                                |
| s       | win-switch-split-window-horizontally | splits the current window into two equal windows, one above the other |
| v       | win-switch-split-window-vertically   | splits the current window into two equal windows, side by side        |
| d       | win-switch-delete-window             | delete the current window                                             |

#+BEGIN_SRC emacs-lisp
  (require 'win-switch)
  (setq win-switch-window-threshold 1)
#+END_SRC

**** Bindings
 
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "\C-xo") 'win-switch-dispatch)
    (win-switch-set-keys '("h") 'left)
    (win-switch-set-keys '("l") 'right)
    (win-switch-set-keys '("j") 'down)
    (win-switch-set-keys '("k") 'up)
    (win-switch-set-keys '("n") 'next-window)
    (win-switch-set-keys '("p") 'previous-window)
    (win-switch-set-keys '("f") 'other-frame)
    (win-switch-set-keys '("H") 'shrink-horizontally)
    (win-switch-set-keys '("L") 'enlarge-horizontally)
    (win-switch-set-keys '("J") 'shrink-vertically)
    (win-switch-set-keys '("K") 'enlarge-vertically)
    (win-switch-set-keys '("s") 'split-horizontally)
    (win-switch-set-keys '("v") 'split-vertically)
    (win-switch-set-keys '("d") 'delete-window)
#+END_SRC
