#+TITLE:     My Emacs Configuration
#+AUTHOR:    joe di castro
#+EMAIL:     joe@joedicastro.com
#+DATE:      2014-03-09
#+LANGUAGE:  en

* Emacs Configuration using Org-Babel

*This is a work in progress, and is far from being ended*

This repository contains the setup I use to customize Emacs. The
configuration uses [[http://orgmode.org/][Org-Mode]], [[http://orgmode.org/worg/org-contrib/babel/][Org-Babel]] and [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][Literate Programming]] to
manage all the settings in a unique Org Mode file.

** How it works

It uses one of the standard Emacs init files, =init.el= to bootstrap
all the configuration. This configuration is thought to be stored in
the standard =~/.emacs.d= directory and to setup this configuration
you need to symlink this =emacs= directory to that. Once made that, if
you start Emacs the =~/.emacs.d/init.el= file loads the
=~/emacs.d/readme.org= file into Emacs, and exports all the code
blocks (this process is called "tangling") to
=~/.emacs.d/readme.el=. If a block is marked with =:tangle no= it will
be skipped. When the tangling is finished =readme.el= is loaded to
initialize Emacs.

The cool thing about this setup is that you can export the same file
as documentation to HTML or PDF or LaTeX quite easily, e.g. to do it
from Org mode directly press =C-c C-e=, choose =h= and then one of the
options to produce HTML output. At the same time it makes the
configuration management a delight, been pretty easy to find any
setting and organize them.

* Packages setup
** Packages list

The list of packages to install in a fresh installation. The way to
maintain clean and updated this list for me is the following:

- Install a package from the =package.el= built-in interface via =M-x list-packages=
- Test it
  - If seems Ok and I want to use it regularly, add it to the list.
  - If I don't like it, delete the plugin directory in the =~/.emacs.d/elpa= tree.
    I don't care too much about other dependecies that could be also
    installed, I'll get rid of them in the next clean install.

#+BEGIN_SRC emacs-lisp
    ; A package for line helps to mantain the list
    (setq my-packages
        '(
            ag
            auto-complete
            browse-kill-ring
            buffer-move
            calfw
            elfeed
            elpy
            evil
            evil-indent-textobject
            evil-leader
            evil-matchit
            evil-nerd-commenter
            flatland-theme
            git-commit-mode
            git-rebase-mode
            gitconfig-mode
            gitignore-mode
            google-maps
            helm
            ido-ubiquitous
            ido-vertical-mode
            ido-yes-or-no
            ipython
            load-theme-buffer-local
            magit
            markdown-mode
            moe-theme
            monokai-theme
            multi-term
            org-plus-contrib
            pretty-mode
            rainbow-mode
            smart-mode-line
            smartparens
            smex
            sublime-themes
            surround
            swoop
            twittering-mode
            ujelly-theme
            undo-tree
            w3m
            yasnippet
    ))
#+END_SRC

** Repositories

The ELPA repositories from where the packages are fetched.

#+BEGIN_SRC emacs-lisp
    (setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
                             ("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("org" . "http://orgmode.org/elpa/")
                             ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

** Auto-installation

The auto-installation process for all the packages that are not
already installed. This is for bootstrap a fresh install.

#+BEGIN_SRC emacs-lisp
    ;;; initialize the packages and create the packages list if not exists
    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))

    ;;; install packages if not exists
    (dolist (pkg my-packages)
      (when (and (not (package-installed-p pkg))
               (assoc pkg package-archive-contents))
        (package-install pkg)))
#+END_SRC

*** Errors after compling in a fresh installation

   Some packages (e.g. /org-plus-contrib/) can be broken after
   automatic compilation via =package.el=

   To solve this issue we can proceed as follow:

   - Remove all the compiled files (=*.elc=) from the folder
   - Recompile the directory again whith this:

#+BEGIN_EXAMPLE emacs-lisp
    (byte-recompile-directory (expand-file-name "~/.emacs.d/elpa/org-plug-contrib") 0)
#+END_EXAMPLE

** Updating Packages

Requires to do it manually, but is a pretty easy task!

1. execute the command =M-x list-packages= which will automatically refresh the package list
2. press the key =U= to mark all upgradable packages to be upgraded
3. finally press the =x= key to actually perform the new updates

Emacs will then fetch and install all upgrades, and ask you to whether
to remove the old, obsolete versions afterwards.

* General Behaviour

| Binding | Call               | Do                                            |
|---------+--------------------+-----------------------------------------------|
| C-w     | backward-kill-word | Kill the entire previous (to the cursor) word |

** Encoding

Make sure that UTF-8 is used everywhere.

#+BEGIN_SRC emacs-lisp
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-language-environment "UTF-8")
    (prefer-coding-system 'utf-8)
#+END_SRC

** Temporal directory

I like to keep all of the temporal files and dirs (cache, backups,
...) in an unique directory. If this directory does not exists, then
create it

#+BEGIN_SRC emacs-lisp
     (unless (file-exists-p "~/.emacs.d/tmp")
        (make-directory "~/.emacs.d/tmp"))
#+END_SRC

** Disable auto-save files

I prefer to use a undo-tree with branches that store auto-save files.

#+BEGIN_SRC emacs-lisp
    (setq auto-save-default nil)
    (setq auto-save-list-file-prefix nil)
#+END_SRC

** Backup files directory

Don't spread backup files all over the filesystem, one place to store
them all

#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
        '(("" . "~/.emacs.d/tmp/backup")))
#+END_SRC

** History

Maintain a history of past actions.

#+BEGIN_SRC emacs-lisp
    (setq savehist-file "~/.emacs.d/tmp/history")
    (setq-default history-length 1000)
    (savehist-mode t)
    (setq savehist-save-minibuffer-history 1)
    (setq savehist-additional-variables
          '(kill-ring
            search-ring
            regexp-search-ring))
#+END_SRC

** Show matching parenthesis

Show the matching parenthesis when the cursor is above one of them.

#+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0)
    (show-paren-mode t)
#+END_SRC

** Always show trailing white-spaces

Show the trailing white-spaces in the buffer.

#+BEGIN_SRC emacs-lisp
    (setq-default show-trailing-whitespace t)

    ; don't show them in the terminal, from http://stackoverflow.com/a/20126745/634816
    (add-hook
     'term-mode-hook
     (lambda() (setq show-trailing-whitespace nil)))
#+END_SRC

** Always indent with spaces

No more tabs, please, use damn spaces, for God's sake!

#+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default default-tab-width 4)
#+END_SRC

** Replace yes/no questions with y/n

Less keystrokes, I already press enough keys along the day.

#+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Mondays are the first day of the week (for M-x calendar)

Set the calendar to my country's calendar standards

#+BEGIN_SRC emacs-lisp
    (setq-default calendar-week-start-day 1)
#+END_SRC

** Use undo-tree for better undo

Emacs's undo system allows you to recover any past state of a buffer
(the standard undo/redo system loses any "redoable" states whenever
you make an edit). However, Emacs's solution, to treat "undo" itself
as just another editing action that can be undone, can be confusing
and difficult to use.

Both the loss of data with standard undo/redo and the confusion of
Emacs' undo stem from trying to treat undo history as a linear
sequence of changes. =undo-tree-mode= instead treats undo history as
what it is: a branching tree of changes (the same system that Vim has
had for some time now). This makes it substantially easier to undo and
redo any change, while preserving the entire history of past states.

#+BEGIN_SRC emacs-lisp
    (require 'undo-tree)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/tmp/undo")))
    (setq undo-tree-visualizer-timestamps t)
    (global-undo-tree-mode)
#+END_SRC

** Keep session between emacs runs (Desktop)

Desktop Save Mode is a feature to save the state of Emacs from one
session to another.

#+BEGIN_SRC emacs-lisp
    (require 'desktop)
    (setq desktop-path '("~/.emacs.d/tmp/"))
    (setq desktop-dirname "~/.emacs.d/tmp/")
    (setq desktop-base-file-name "emacs-desktop")
    (setq desktop-globals-to-save
          (append '((extended-command-history . 50)
                    (file-name-history . 200)
                    (grep-history . 50)
                    (compile-history . 50)
                    (minibuffer-history . 100)
                    (query-replace-history . 100)
                    (read-expression-history . 100)
                    (regexp-history . 100)
                    (regexp-search-ring . 100)
                    (search-ring . 50)
                    (shell-command-history . 50)
                    tags-file-name
                    register-alist)))
    (desktop-save-mode 1)
#+END_SRC

** User information

Sets the user's information properly.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "joe di castro"
        user-mail-address "joe@joedicastro.com")
#+END_SRC

** Remove beep

Remove the annoying beep.

#+BEGIN_SRC emacs-lisp
    (setq visible-bell t)
#+END_SRC

** Winner-mode

Winner mode lets you revert to a previous windows configuration.

| Binding | Call        | Do                                                                  |
|---------+-------------+---------------------------------------------------------------------|
| C-c ←   | winner-undo | Switch back to an earlier window configuration saved by Winner mode |
| C-c →   | winner-redo | Restore a more recent window configuration saved by Winner mode     |

#+BEGIN_SRC emacs-lisp
    (winner-mode t)
#+END_SRC

** TODO Use ibuffer by default

Ibuffer is an advanced replacement for BufferMenu, which lets you
operate on buffers much in the same manner as Dired.

#+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
#+END_SRC

* Aesthetics

You don't only want to have a beast to edit, you want a good looking
one too!

** Remove the welcome screen

The welcome screen is for guests only, I'm in home now!

#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)
#+END_SRC

** Remove the message in the scratch buffer

Idem as above for the same reasons.

#+BEGIN_SRC emacs-lisp
    (setq initial-scratch-message "")
#+END_SRC

** A cleaner frame

I prefer more screen space and less annoying menus, bars and scroll
bars.

*** Hide the menu bar

#+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
#+END_SRC

*** Hide the tool bar

#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
#+END_SRC

*** Hide the scroll bar

#+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)
#+END_SRC

** Color Theme

Here I define the default theme, a total subjective decision, of
course.

#+BEGIN_SRC emacs-lisp
    (load-theme 'monokai t)
#+END_SRC

** Mode Line

Settings for the mode line

*** Show the column number

#+BEGIN_SRC emacs-lisp
     (column-number-mode t)
#+END_SRC

*** Show the buffer size (bytes)

#+BEGIN_SRC emacs-lisp
    (setq size-indication-mode t)
#+END_SRC

*** Show the current function

This is very useful in programming and also to see the headers in
outlines modes.

#+BEGIN_SRC emacs-lisp
    (which-function-mode 1)
#+END_SRC

*** Smart mode line

This package shows a very nice and very informativa mode line.

#+BEGIN_SRC emacs-lisp
    ;;; smart-mode-line
    (setq sml/theme 'dark)
    (setq sml/mode-width 'full)
    (setq sml/name-width 30)
    (sml/setup)
#+END_SRC

** Font

The font to use. I choose monospace and /Dejavu Sans Mono/ because is
an open font and has the best Unicode support, and looks very fine to me too!

#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :family "Dejavu Sans Mono" :height 110)
#+END_SRC

** Cursor not blinking

The blinking cursor is pretty annoying, so disable it.

#+BEGIN_SRC emacs-lisp
    (blink-cursor-mode -1)
#+END_SRC

** Highlight the current line

To help us to locate where the cursor is.

#+BEGIN_SRC emacs-lisp
    (global-hl-line-mode 1)
#+END_SRC

** Show empty lines

This option show the empty lines at the end (bottom) of the buffer.

#+BEGIN_SRC emacs-lisp
    (toggle-indicate-empty-lines)
#+END_SRC

** Pretty mode

Use mathematical *Unicode* /symbols/ instead of expressions or keywords in
some programming languages

#+BEGIN_SRC emacs-lisp
    (global-pretty-mode t)
#+END_SRC

** Better line numbers

Display a more appealing line numbers.

#+BEGIN_SRC emacs-lisp
    ; 2014-04-04: Holy moly its effort to get line numbers like vim!
    ; http://www.emacswiki.org/emacs/LineNumbers#toc6
    (unless window-system
      (add-hook 'linum-before-numbering-hook
    (lambda ()
    (setq-local linum-format-fmt
    (let ((w (length (number-to-string
    (count-lines (point-min) (point-max))))))
    (concat "%" (number-to-string w) "d"))))))

    (defun linum-format-func (line)
      (concat
       (propertize (format linum-format-fmt line) 'face 'linum)
       (propertize " " 'face 'linum)))

    (unless window-system
      (setq linum-format 'linum-format-func))
#+END_SRC

** More thinner window divisions

The default windows divisions are more uglier than sin.

#+BEGIN_SRC emacs-lisp
    (fringe-mode '(1 . 1))
#+END_SRC

* Edition

Some general edition improvements.

** TODO Auto-completion

Auto Complete Mode (aka =auto-complete.el=, =auto-complete-mode=) is a
extension that automates and advances completion-system.

#+BEGIN_SRC emacs-lisp
    (require 'auto-complete)
    (global-auto-complete-mode)
    (setq ac-use-menu-map t)
    ;; Default settings
    (define-key ac-menu-map "\C-n" 'ac-next)
    (define-key ac-menu-map "\C-p" 'ac-previous)
    (setq ac-ignore-case 'smart)
#+END_SRC

*** enable it globally

Make it available everywhere.

#+BEGIN_SRC emacs-lisp
(defun auto-complete-mode-maybe ()
  "No maybe for you. Only AC!"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1)))
#+END_SRC

*** auto-complete file

The file where store the history of auto-complete.

#+BEGIN_SRC emacs-lisp
(setq ac-comphist-file (concat user-emacs-directory
             "temp/ac-comphist.dat"))
#+END_SRC

** Delete after insertion over selection

Delete the previous selection when overrides it with a new insertion.

#+BEGIN_SRC emacs-lisp
    (delete-selection-mode)
#+END_SRC

** TODO Basic indentation

#+BEGIN_SRC emacs-lisp
    (setq-default c-basic-offset 4)
#+END_SRC

** Smartparens

Minor mode for Emacs that deals with parens pairs and tries to be
smart about it.

#+BEGIN_SRC emacs-lisp
    (require 'smartparens-config)
    (smartparens-global-mode)
#+END_SRC

** Backward-kill-word as alternative to Backspace

Kill the entire word instead of hitting Backspace key several
times. To do this will bind the =backward-kill-region= function to the
=C-w= key combination

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-w" 'backward-kill-word)
#+END_SRC

*** Rebind the original C-w binding

Now we reasigne the original binding to that combination to a new one

#+BEGIN_SRC emacs-lisp
    (global-set-key "\C-x\C-k" 'kill-region)
    (global-set-key "\C-c\C-k" 'kill-region)
#+END_SRC

* Vim-like Features

For those who came from Vim is more easy to use something alike

** Use evil


| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| C-z     | evil-emacs-state         | Toggle evil-mode                                             |

#+BEGIN_SRC emacs-lisp
    (setq evil-shift-width 4)
    (require 'evil)
    (evil-mode 1)
#+END_SRC

*** ESC quits almost everywhere

Gotten from [[http://stackoverflow.com/questions/8483182/emacs-evil-mode-best-practice][here]]

#+BEGIN_SRC emacs-lisp
    ;;; esc quits

    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

*** Move along windows

#+BEGIN_SRC emacs-lisp
    (require 'windmove)
    (define-key evil-normal-state-map "\C-j" 'windmove-down)
    (define-key evil-normal-state-map "\C-k" 'windmove-up)
    (define-key evil-normal-state-map "\C-h" 'windmove-left)
    (define-key evil-normal-state-map "\C-l" 'windmove-right)
    (define-key evil-motion-state-map "\C-j" 'windmove-down)
    (define-key evil-motion-state-map "\C-k" 'windmove-up)
    (define-key evil-motion-state-map "\C-h" 'windmove-left)
    (define-key evil-motion-state-map "\C-l" 'windmove-right)
#+END_SRC

*** Buffer movements

#+BEGIN_SRC emacs-lisp
    (require 'buffer-move)
    (define-key evil-normal-state-map (kbd "C-M-j") 'buf-move-down)
    (define-key evil-normal-state-map (kbd "C-M-k") 'buf-move-up)
    (define-key evil-normal-state-map (kbd "C-M-h") 'buf-move-left)
    (define-key evil-normal-state-map (kbd "C-M-l") 'buf-move-right)
    (define-key evil-motion-state-map (kbd "C-M-j") 'buf-move-down)
    (define-key evil-motion-state-map (kbd "C-M-k") 'buf-move-up)
    (define-key evil-motion-state-map (kbd "C-M-h") 'buf-move-left)
    (define-key evil-motion-state-map (kbd "C-M-l") 'buf-move-right)
#+END_SRC

*** Window resize

#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-S-j") 'shrink-window)
    (define-key evil-normal-state-map (kbd "C-S-k") 'enlarge-window)
    (define-key evil-normal-state-map (kbd "C-S-h") 'shrink-window-horizontally)
    (define-key evil-normal-state-map (kbd "C-S-l") 'enlarge-window-horizontally)
    (define-key evil-motion-state-map (kbd "C-S-j") 'shrink-window)
    (define-key evil-motion-state-map (kbd "C-S-k") 'enlarge-window)
    (define-key evil-motion-state-map (kbd "C-S-h") 'shrink-window-horizontally)
    (define-key evil-motion-state-map (kbd "C-S-l") 'enlarge-window-horizontally)
#+END_SRC

*** Org-mode customization
#+BEGIN_SRC emacs-lisp
    (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
    (evil-define-key 'normal org-mode-map (kbd "SPC") 'org-cycle)
    (evil-define-key 'normal org-mode-map (kbd "H") 'org-metaleft)
    (evil-define-key 'normal org-mode-map (kbd "L") 'org-metaright)
    (evil-define-key 'normal org-mode-map (kbd "K") 'org-metaup)
    (evil-define-key 'normal org-mode-map (kbd "J") 'org-metadown)
    (evil-define-key 'normal org-mode-map (kbd "U") 'org-shiftmetaleft)
    (evil-define-key 'normal org-mode-map (kbd "I") 'org-shiftmetaright)
    (evil-define-key 'normal org-mode-map (kbd "O") 'org-shiftmetaup)
    (evil-define-key 'normal org-mode-map (kbd "P") 'org-shiftmetadown)
    (evil-define-key 'normal org-mode-map (kbd "t")   'org-todo)
    (evil-define-key 'normal org-mode-map (kbd "-")   'org-cycle-list-bullet)

    (evil-define-key 'insert org-mode-map (kbd "C-c .")
      '(lambda () (interactive) (org-time-stamp-inactive t)))
#+END_SRC

*** Elfeed customization

#+BEGIN_SRC emacs-lisp
    ; elfeed-search
    (evil-define-key 'normal elfeed-search-mode-map (kbd "q") 'quit-window)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "a") 'elfeed-search-update--force)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "A") 'elfeed-update)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "s") 'elfeed-search-live-filter)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "RET") 'elfeed-search-show-entry)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "o") 'elfeed-search-browse-url)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "y") 'elfeed-search-yank)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "r") 'elfeed-search-untag-all-unread)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "u") 'elfeed-search-tag-all-unread)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "+") 'elfeed-search-tag-all)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "-") 'elfeed-search-untag-all)
    (evil-define-key 'normal elfeed-search-mode-map (kbd "E") (lambda() (interactive)(find-file "~/.emacs.d/elfeed.el")))
    ; elfeed-show
    (evil-define-key 'normal elfeed-show-mode-map (kbd "q") 'elfeed-kill-buffer)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "g") 'elfeed-show-refresh)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "n") 'elfeed-show-next)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "p") 'elfeed-show-prev)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "o") 'elfeed-show-visit)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "y") 'elfeed-show-yank)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "u") (elfeed-expose #'elfeed-show-tag 'unread))
    (evil-define-key 'normal elfeed-show-mode-map (kbd "+") 'elfeed-show-tag)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "-") 'elfeed-show-untag)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "SPC") 'scroll-up)
    (evil-define-key 'normal elfeed-show-mode-map (kbd "S-SPC") 'scroll-down)
#+END_SRC

*** Disable it in certain modes

#+BEGIN_SRC emacs-lisp
;  (evil-set-initial-state 'elfeed-search-mode 'emacs)
;  (evil-set-initial-state 'elfeed-show-mode 'emacs)
#+END_SRC

** evil-leader

#+BEGIN_SRC emacs-lisp
  (require 'evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "0" 'org-agenda
    "8" 'org-capture
    "9" 'cfw:open-org-calendar
    "a" 'ag
    "B" 'ibuffer
    "b" 'ido-switch-buffer
    "c" 'evilnc-comment-or-uncomment-lines
    "d" 'dired
    "ew" 'whitespace-cleanup
    "f" 'swoop
    "F" 'swoop-multi
    "g" 'magit-status
    "i" 'browse-kill-ring
    "k" 'delete-window
    "K" 'kill-buffer
    "l" 'linum-mode
    "m" 'smex
    "M" 'smex-major-mode-commands
    "n" 'elfeed
    "o" 'find-file
    "q" 'helm-surfraw
    "``" 'save-buffers-kill-terminal
    "s" 'split-window-vertically
    "t" 'twit
    "u" 'undo-tree-visualize
    "v" 'split-window-horizontally
    "w" 'save-buffer
    "X" 'multi-term-next
    "x" 'multi-term
    "z" 'delete-other-windows
   )
#+END_SRC

** evil-indent-textobject

#+BEGIN_SRC emacs-lisp
    (require 'evil-indent-textobject)
#+END_SRC

** evil-nerd-commenter

#+BEGIN_SRC emacs-lisp
    (require 'evil-nerd-commenter)
#+END_SRC

** Surround

Use the surround plugin, the equivalent to the Vim one.

#+BEGIN_SRC emacs-lisp
    (require 'surround)
    (global-surround-mode 1)
#+END_SRC

* Browser

#+BEGIN_SRC emacs-lisp
;    (setq browse-url-browser-function 'w3m-browse-url)
;    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
    (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program "firefox")
    (setq w3m-default-display-inline-images t)
#+END_SRC

* Org-Mode

** Org-mode settings

*** Enable Org Mode

#+BEGIN_SRC emacs-lisp
    (require 'org)
#+END_SRC

*** Set default directories

#+BEGIN_SRC emacs-lisp
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
#+END_SRC

*** Highlight code blocks syntax

#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
#+END_SRC

*** Tasks management

**** Record date and time when a task is marked as DONE

#+BEGIN_SRC emacs-lisp
    (setq org-log-done t)
#+END_SRC

**** Detect idle time when clock is running

#+BEGIN_SRC emacs-lisp
    (setq org-clock-idle-time 10)
#+END_SRC

*** Agenda & diary

**** Include diary entries
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-include-diary t)
#+END_SRC

**** Agenda files
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org"))
#+END_SRC

*** Third Apps

**** Configure the external apps to open files
#+BEGIN_SRC emacs-lisp
     (setq org-file-apps
        '(("\\.pdf\\'" . "zathura %s")
          ("\\.gnumeric\\'" . "gnumeric %s")))
#+END_SRC

*** Protect hidden trees for being inadvertily edited

#+BEGIN_SRC emacs-lisp
    (setq org-catch-invisible-edits "error")
    (setq org-ctrl-k-protect-subtree "error")
#+END_SRC

*** Show images inline

Only works in GUI, but is a nice feature to have

#+BEGIN_SRC emacs-lisp
    (when (window-system)
        (setq org-startup-with-inline-images t))
#+END_SRC

**** Limit images width

#+BEGIN_SRC emacs-lisp
    (setq org-image-actual-width '(300))
#+END_SRC
** Org-location-google-maps

The google-maps Emacs extension allows to display Google Maps directly
inside Emacs and integrate them in org-mode as addresses.

#+BEGIN_SRC emacs-lisp
    (require 'google-maps)
    (require 'org-location-google-maps)
#+END_SRC

** Org-capture

Capture lets you quickly store notes with little interruption of your
work flowCapture lets you quickly store notes with little interruption
of your work flow

*** Org-protocol

org-protocol intercepts calls from emacsclient to trigger custom
actions without external dependencies. Only one protocol has to be
configured with your external applications or the operating system, to
trigger an arbitrary number of custom actions.

To use it to capture web urls and notes from Firefox, install this
[[http://chadok.info/firefox-org-capture/][Firefox extension]]


#+BEGIN_SRC emacs-lisp
    (server-start)
    (require 'org-protocol)

    (setq org-protocol-default-template-key "w")
    (setq org-capture-templates
          (quote
           (("w" "Web captures" entry (file+headline "~/org/notes.org" "Web")
             "* %^{Title}\n\n  Source: %u, %c\n\n  %i"
             :empty-lines 1))))
#+END_SRC

*** Org-contacts

The org-contacts Emacs extension allows to manage your contacts using
Org-mode.

#+BEGIN_SRC emacs-lisp
  (require 'org-contacts)
  (setq org-contacts-file "~/org/contacts.org")
  (setq org-contacts-matcher "EMAIL<>\"\"|ALIAS<>\"\"|PHONE<>\"\"|ADDRESS<>\"\"|BIRTHDAY")

  (add-to-list 'org-capture-templates
    '("p" "Contacts" entry (file "~/org/contacts.org")
       "** %(org-contacts-template-name)
       :PROPERTIES:
       :EMAIL: %(org-contacts-template-email)
       :END:"))
#+END_SRC

*** Other captures

#+BEGIN_SRC emacs-lisp
 (add-to-list 'org-capture-templates
    '("t" "TODO" entry (file+headline "~/org/tasks.org" "Tasks")
       "* TODO %?\n  %i\n  %a"))
#+END_SRC

* Batteries
*** Calfw

This program displays a calendar view in the Emacs buffer.

#+BEGIN_SRC emacs-lisp
    (require 'calfw)
    (require 'calfw-org)
#+END_SRC

**** Unicode chars for lines

#+BEGIN_SRC emacs-lisp
;; Unicode characters
(setq cfw:fchar-junction ?╋
      cfw:fchar-vertical-line ?┃
      cfw:fchar-horizontal-line ?━
      cfw:fchar-left-junction ?┣
      cfw:fchar-right-junction ?┫
      cfw:fchar-top-junction ?┯
      cfw:fchar-top-left-corner ?┏
      cfw:fchar-top-right-corner ?┓)
#+END_SRC

*** Smex

Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

| Binding | Call                     | Do                                                           |
|---------+--------------------------+--------------------------------------------------------------|
| M-x     | smex                     | Calls a interactive command using smex                       |
| M-X     | smex-major-mode-commands | Idem as above but limited to the current major mode commands |

#+BEGIN_SRC emacs-lisp
    (require 'smex)
#+END_SRC

**** Set cache file

Smex keeps a file to save its state betweens Emacs sessions.
The default path is =~/.smex-items=

#+BEGIN_SRC emacs-lisp
    (setq smex-save-file "~/.emacs.d/tmp/smex-items")
#+END_SRC

**** Useful bindings & Delayed Initation

#+BEGIN_QUOTE
I install smex with the following code to make emacs startup a little
faster.  This delays initializing smex until it's needed. IMO, smex
should load without this hack.

Just have smex call =smex-initialize= when it's needed instead of
having the user do it. --[[http://www.emacswiki.org/emacs/Smex][LeWang on EmacsWiki]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(global-set-key [(meta x)] (lambda ()
                             (interactive)
                             (or (boundp 'smex-cache)
                                 (smex-initialize))
                             (global-set-key [(meta x)] 'smex)
                             (smex)))

(global-set-key [(shift meta x)] (lambda ()
                                   (interactive)
                                   (or (boundp 'smex-cache)
                                       (smex-initialize))
                                   (global-set-key [(shift meta x)] 'smex-major-mode-commands)
                                   (smex-major-mode-commands)))
#+END_SRC

*** Ido
**** set cache file
#+BEGIN_SRC emacs-lisp
    (setq ido-save-directory-list-file "~/.emacs.d/tmp/ido.last")
#+END_SRC

**** enable Ido
#+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-use-virtual-buffers t)
    (require 'ido)
    (ido-mode t)
    (ido-everywhere t)
#+END_SRC

**** Ido-ubiquitous

Gimme some ido... everywhere!

Does what you expected ido-everywhere to do.

#+BEGIN_SRC emacs-lisp
    (require 'ido-ubiquitous)
    (ido-ubiquitous-mode t)
#+END_SRC

**** Ido-vertical-mode

Makes ido-mode display vertically.

#+BEGIN_SRC emacs-lisp
    (require 'ido-vertical-mode)
    (ido-vertical-mode t)
#+END_SRC

**** Ido for yes or no questions

#+BEGIN_SRC emacs-lisp
    (require 'ido-yes-or-no)
    (ido-yes-or-no-mode t)
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
    (require 'magit)
#+END_SRC

*** Elfeed

Elfeed is an extensible web feed reader for Emacs, supporting both
Atom and RSS

*Search mode*

| Binding | Call                           | Do                                          |
|---------+--------------------------------+---------------------------------------------|
| q       | quit-window                    | exit                                        |
| a       | elfeed-search-update--force    | refresh view of the feed listing            |
| A       | elfeed-update                  | fetch feed updates from the servers         |
| s       | elfeed-search-live-filter      | update the search filter (date & tags)      |
| RET     | elfeed-search-show-entry       | view selected entry in a buffer             |
| o       | elfeed-search-browse-url       | open selected entries in your browser       |
| y       | elfeed-search-yank             | copy selected entries URL to the clipboard  |
| r       | elfeed-search-untag-all-unread | mark selected entries as read               |
| u       | elfeed-search-tag-all-unread   | mark selected entries as unread             |
| +       | elfeed-search-tag-all          | add a specific tag to selected entries      |
| -       | elfeed-search-untag-all        | remove a specific tag from selected entries |
| E       |                                | open the feed urls file                     |

*Show mode*

| Binding | Call                | Do                                  |
|---------+---------------------+-------------------------------------|
| q       | elfeed-kill-buffer  | exit the entry                      |
| g       | elfeed-show-refresh | refresh the entry                   |
| n       | elfeed-show-next    | go to the next entry                |
| p       | elfeed-show-prev    | go to the previous entry            |
| o       | elfeed-show-visit   | open the entry in your browser      |
| y       | elfeed-show-yank    | copy the entry URL to the clipboard |
| u       |                     | mark the entry as unread            |
| +       | elfeed-show-tag     | add tag to the entry                |
| -       | elfeed-show-untag   | remove tag from the entry           |
| SPC     | scroll-up           | scroll up the buffer                |
| S-SPC   | scroll-down         | scroll down the buffer              |


#+BEGIN_SRC emacs-lisp
  (require 'elfeed)

  ; Load the feeds file
  (load "~/.emacs.d/elfeed.el")

  ; Entries older than 2 weeks are marked as read
  (add-hook 'elfeed-new-entry-hook
          (elfeed-make-tagger :before "2 weeks ago"
                              :remove 'unread))

  (setq elfeed-db-directory "~/.emacs.d/tmp/elfeed")
  (setq elfeed-search-filter "@2-days-old +unread")
#+END_SRC

*** Browse Kill Ring

#+BEGIN_SRC emacs-lisp
    (require 'browse-kill-ring)
#+END_SRC

*** Swoop

#+BEGIN_SRC emacs-lisp
    (require 'swoop)
    (setq swoop-font-size-change: nil)
#+END_SRC

*** Multi Term

#+BEGIN_SRC emacs-lisp
    (require 'multi-term)
    (setq multi-term-program "/bin/bash")
#+END_SRC

*** Load theme buffer local

#+BEGIN_SRC emacs-lisp
    (require 'load-theme-buffer-local)
#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
    (require 'yasnippet)
    (yas-global-mode)
#+END_SRC

*** Elpy

#+BEGIN_SRC emacs-lisp
    (require 'elpy)
    (elpy-enable)
    (elpy-use-ipython)
#+END_SRC

*** Ag

A simple ag frontend, loosely based on ack-and-half.el.

#+BEGIN_SRC emacs-lisp
    (require 'ag)
    (setq ag-reuse-buffers 't)
    (setq ag-highlight-search t)
    (setq ag-arguments
        (list "--color" "--smart-case" "--nogroup" "--column" "--all-types" "--"))
#+END_SRC

*** Twittering-mode

Twittering-mode enables you to twit on Emacsen.

| Binding   | Call                                           | Do                                    |
|-----------+------------------------------------------------+---------------------------------------|
| q         | twittering-kill-buffer                         | Kill buffer                           |
| Q         | twittering-edit-mode                           | Edit mode                             |
| j         | twittering-goto-next-status                    | Next Twitter                          |
| k         | twittering-goto-previous-status                | Previous Twitter                      |
| h         | twittering-switch-to-next-timeline             | Next Timeline                         |
| l         | twittering-switch-to-previous-timeline         | Previous Timeline                     |
| g         | beginning-of-buffer                            | Top of the Timeline                   |
| G         | end-of-buffer                                  | Bottom of the Timeline                |
| t         | twittering-update-status-interactive           | Post a tweet                          |
| X         | twittering-delete-status                       | Delete a own tweet                    |
| RET       | twittering-reply-to-user                       | Reply to user                         |
| r         | twittering-native-retweet                      | Retweet                               |
| R         | twittering-organic-retweet                     | Retweet & Edit                        |
| k         | twittering-direct-message                      | Direct Message                        |
| u         | twittering-current-timeline                    | Update Timeline                       |
| b         | twittering-favorite                            | Mark as Favorite                      |
| B         | twittering-unfavorite                          | Unmark as Favorite                    |
| f         | twittering-follow                              | Follow current user                   |
| F         | twittering-unfollow                            | Unfollow current user                 |
| i         | twittering-view-user-page                      | View user profile (Browser)           |
| /         | twittering-search                              | Search                                |
| .         | twittering-visit-timeline                      | Open a new Timeline                   |
| @         | twittering-other-user-timeline                 | Open the Timeline of the current user |
| T         | twittering-toggle-or-retrieve-replied-statuses | Show Thread                           |
| o         | twittering-click                               | Open item in a Browser                |
| TAB       | twittering-goto-next-thing                     | Go to next item                       |
| <backtab> | twittering-goto-previous-thing                 | Go to previous item                   |
| n         | twittering-goto-next-status-of-user            | Go to next current user's tweet       |
| p         | twittering-goto-previous-status-of-user        | Go to previous current user's tweet   |
| SPC       | twittering-scroll-up                           | Timeline scroll up                    |
| S-SPC     | twittering-scroll-down                         | Timeline scroll down                  |
| y         | twittering-push-uri-onto-kill-ring             | Yank current url                      |
| Y         | twittering-push-tweet-onto-kill-ring           | Yank current tweet                    |
| a         | twittering-toggle-activate-buffer              | Toggle Active Timeline                |

#+BEGIN_SRC emacs-lisp
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t)
    (setq twittering-icon-storage-file "~/.emacs.d/tmp/twittering-mode-icons.gz")
    (setq twittering-convert-fix-size 52)
    (setq twittering-initial-timeline-spec-string
          '(":home"))
    (setq twittering-edit-skeleton 'inherit-any)
    (setq twittering-display-remaining t)
    (setq twittering-status-format
        "%i  %S, %RT{%FACE[bold]{%S}} %@  %FACE[shadow]{%p%f%L%r}\n%FOLD[        ]{%T}\n")
#+END_SRC

**** Define my own bindings (based in [[https://github.com/alejandrogomez/turses][Turses]] style)

#+BEGIN_SRC emacs-lisp
    ; remove the current bindings
    (eval-after-load "twittering-mode"
        '(setq twittering-mode-map (make-sparse-keymap)))
    ; set the new bindings
    (add-hook 'twittering-mode-hook
             (lambda ()
               (mapc (lambda (pair)
                       (let ((key (car pair))
                             (func (cdr pair)))
                         (define-key twittering-mode-map
                           (read-kbd-macro key) func)))
                     '(
                       ("q" . twittering-kill-buffer)
                       ("Q" . twittering-edit-mode)
                       ("j" . twittering-goto-next-status)
                       ("k" . twittering-goto-previous-status)
                       ("h" . twittering-switch-to-next-timeline)
                       ("l" . twittering-switch-to-previous-timeline)
                       ("g" . beginning-of-buffer)
                       ("G" . end-of-buffer)
                       ("t" . twittering-update-status-interactive)
                       ("X" . twittering-delete-status)
                       ("RET" . twittering-reply-to-user)
                       ("r" . twittering-native-retweet)
                       ("R" . twittering-organic-retweet)
                       ("d" . twittering-direct-message)
                       ("u" . twittering-current-timeline)
                       ("b" . twittering-favorite)
                       ("B" . twittering-unfavorite)
                       ("f" . twittering-follow)
                       ("F" . twittering-unfollow)
                       ("i" . twittering-view-user-page)
                       ("/" . twittering-search)
                       ("." . twittering-visit-timeline)
                       ("@" . twittering-other-user-timeline)
                       ("T" . twittering-toggle-or-retrieve-replied-statuses)
                       ("o" . twittering-click)
                       ("TAB" . twittering-goto-next-thing)
                       ("<backtab>" . twittering-goto-previous-thing)
                       ("n" . twittering-goto-next-status-of-user)
                       ("p" . twittering-goto-previous-status-of-user)
                       ("SPC" . twittering-scroll-up)
                       ("S-SPC" . twittering-scroll-down)
                       ("y" . twittering-push-uri-onto-kill-ring)
                       ("Y" . twittering-push-tweet-onto-kill-ring)
                       ("a" . twittering-toggle-activate-buffer)
                      ))))
#+END_SRC

**** Spell checking on tweets

#+BEGIN_SRC emacs-lisp
    (add-hook 'twittering-edit-mode-hook (lambda () (ispell-minor-mode) (flyspell-mode)))
#+END_SRC
